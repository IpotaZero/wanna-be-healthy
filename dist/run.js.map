{"version":3,"mappings":"ksCAAO,MAAMA,CAAO,CAChB,OAAO,QAAQC,EAAuC,CAClD,OAAAA,EAAU,MAAM,WAAa,eAC7BA,EAAU,MAAM,QAAU,IAC1BA,EAAU,MAAM,cAAgB,OAEzB,KAAK,MAAM,GAAG,CACzB,CAEA,aAAa,OAAOA,EAAwB,CACxCA,EAAU,MAAM,WAAa,eAC7BA,EAAU,MAAM,QAAU,IAE1B,MAAM,KAAK,MAAM,GAAG,EAEpBA,EAAU,MAAM,cAAgB,KACpC,CAEA,OAAO,MAAMC,EAAY,CACrB,OAAO,IAAI,QAAeC,GAAY,CAClC,WAAWA,EAASD,CAAE,CAC1B,CAAC,CACL,CACJ,CCpBO,MAAME,CAAO,CAChB,MAAOC,GAEP,OAAO,KAAKC,EAAmB,CAC3B,KAAKD,GAAgBC,CACzB,CAEA,aAAa,KACTC,EACA,CACI,YAAAC,EAAc,KAAKC,GACnB,YAAAC,EAAc,KAAKC,EAAA,EACqC,GAC9D,CACE,KAAKN,GAAc,MAEnB,MAAMJ,EAAY,SAAS,eAAe,WAAW,EAErD,MAAMD,EAAO,QAAQC,CAAS,EAE9B,IAAIW,EAAO,GACPC,EAAS,GAGbb,EAAO,MAAM,GAAI,EAAE,KAAK,IAAM,CACrBY,IACDJ,EAAA,EACAK,EAAS,GAEjB,CAAC,EAED,KAAKR,GAAgBE,EAAA,EACrB,MAAM,KAAKF,GAAc,MACzBO,EAAO,GAEHC,GACAH,EAAA,EAGJ,MAAMV,EAAO,OAAOC,CAAS,CACjC,CAEA,MAAOQ,IAAe,CAClB,MAAMK,EAAI,SAAS,cAAc,GAAG,EACpCA,EAAE,YAAc,aAChBA,EAAE,UAAU,IAAI,SAAS,EACzB,SAAS,KAAK,YAAYA,CAAC,CAC/B,CAEA,MAAOH,IAAe,CAClB,SAAS,iBAAiB,UAAU,EAAE,QAAS,GAAM,EAAE,QAAQ,CACnE,CACJ,CCvDO,MAAMI,UAAe,WAAY,CACpCC,GAEAC,GAEA,aAAc,CACV,QAEA,KAAKA,GAAQ,KAAK,UAClB,KAAK,UAAY,GAEjB,KAAKD,GAAY,YAAY,KAAKE,GAAQ,KAAK,IAAI,EAAG,IAAO,EAAE,CACnE,CAEAA,IAAU,CACN,KAAK,WAAa,KAAKD,GAAM,KAAK,UAAU,MAAM,GAAK,GAEnD,KAAK,UAAU,QAAU,KAAKA,GAAM,QACpC,cAAc,KAAKD,EAAS,CAEpC,CACJ,CAEA,eAAe,OAAO,WAAYD,CAAM,EClBxC,SAAS,iBAAiB,mBAAoB,SAAY,CACtD,KAAM,CAAE,WAAAI,CAAA,EAAe,2CAAM,QAAO,iCAAwB,oBAAAA,CAAA,uBAE5Df,EAAO,KAAK,IAAIe,CAAY,CAChC,CAAC","names":["Awaits","container","ms","resolve","Scenes","#currentScene","firstScene","newScene","showLoading","#showLoading","hideLoading","#hideLoading","done","showed","p","Typing","#interval","#text","#update","SceneTitle"],"ignoreList":[],"sources":["../src/utils/Awaits.ts","../src/Scenes/Scenes.ts","../src/utils/Typing.ts","../src/run.ts"],"sourcesContent":["export class Awaits {\r\n    static fadeOut(container: HTMLElement): Promise<void> {\r\n        container.style.transition = \"opacity 0.2s\"\r\n        container.style.opacity = \"0\"\r\n        container.style.pointerEvents = \"none\"\r\n\r\n        return this.sleep(200)\r\n    }\r\n\r\n    static async fadeIn(container: HTMLElement) {\r\n        container.style.transition = \"opacity 0.2s\"\r\n        container.style.opacity = \"1\"\r\n\r\n        await this.sleep(200)\r\n\r\n        container.style.pointerEvents = \"all\"\r\n    }\r\n\r\n    static sleep(ms: number) {\r\n        return new Promise<void>((resolve) => {\r\n            setTimeout(resolve, ms)\r\n        })\r\n    }\r\n}\r\n","import { Awaits } from \"../utils/Awaits.js\"\r\nimport { Scene } from \"./Scene.js\"\r\n\r\nexport class Scenes {\r\n    static #currentScene: Scene\r\n\r\n    static init(firstScene: Scene) {\r\n        this.#currentScene = firstScene\r\n    }\r\n\r\n    static async goto(\r\n        newScene: () => Scene,\r\n        {\r\n            showLoading = this.#showLoading,\r\n            hideLoading = this.#hideLoading,\r\n        }: { showLoading?: () => void; hideLoading?: () => void } = {},\r\n    ) {\r\n        this.#currentScene.end()\r\n\r\n        const container = document.getElementById(\"container\")!\r\n\r\n        await Awaits.fadeOut(container)\r\n\r\n        let done = false\r\n        let showed = false\r\n\r\n        // 1秒タイマーを並行実行\r\n        Awaits.sleep(1000).then(() => {\r\n            if (!done) {\r\n                showLoading() // ローディング画面表示\r\n                showed = true\r\n            }\r\n        })\r\n\r\n        this.#currentScene = newScene()\r\n        await this.#currentScene.ready // メイン処理実行\r\n        done = true // 1秒以内に終わればローディングは表示されない\r\n\r\n        if (showed) {\r\n            hideLoading()\r\n        }\r\n\r\n        await Awaits.fadeIn(container)\r\n    }\r\n\r\n    static #showLoading() {\r\n        const p = document.createElement(\"p\")\r\n        p.textContent = \"Loading...\"\r\n        p.classList.add(\"loading\")\r\n        document.body.appendChild(p)\r\n    }\r\n\r\n    static #hideLoading() {\r\n        document.querySelectorAll(\".loading\").forEach((e) => e.remove())\r\n    }\r\n}\r\n","export class Typing extends HTMLElement {\r\n    #interval: number\r\n\r\n    #text\r\n\r\n    constructor() {\r\n        super()\r\n\r\n        this.#text = this.innerText\r\n        this.innerText = \"\"\r\n\r\n        this.#interval = setInterval(this.#update.bind(this), 1000 / 30)\r\n    }\r\n\r\n    #update() {\r\n        this.innerText += this.#text[this.innerText.length] ?? \"\"\r\n\r\n        if (this.innerText.length >= this.#text.length) {\r\n            clearInterval(this.#interval)\r\n        }\r\n    }\r\n}\r\n\r\ncustomElements.define(\"i-typing\", Typing)\r\n","import { Scenes } from \"./Scenes/Scenes\"\r\nimport { Typing } from \"./utils/Typing\"\r\n\r\nTyping\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", async () => {\r\n    const { SceneTitle } = await import(\"./Scenes/SceneTitle.js\")\r\n\r\n    Scenes.init(new SceneTitle())\r\n})\r\n"],"file":"run.js"}